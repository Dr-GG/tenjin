using NUnit.Framework;
using Tenjin.Extensions;
using Tenjin.Tests.Enums;

namespace Tenjin.Tests.ExtensionsTests;

[TestFixture, Parallelizable(ParallelScope.Children)]
public class BitwiseOperationExtensionsTests
{
    [TestCase(BitwiseEnum._0, BitwiseEnum._0, true)]
    [TestCase(BitwiseEnum._1, BitwiseEnum._1, true)]
    [TestCase(BitwiseEnum._2, BitwiseEnum._2, true)]
    [TestCase(BitwiseEnum._4, BitwiseEnum._4, true)]
    [TestCase(BitwiseEnum._8, BitwiseEnum._8, true)]
    [TestCase(BitwiseEnum._16, BitwiseEnum._16, true)]
    [TestCase(BitwiseEnum._32, BitwiseEnum._32, true)]
    [TestCase(BitwiseEnum._64, BitwiseEnum._64, true)]
    [TestCase(BitwiseEnum._128, BitwiseEnum._128, true)]
    [TestCase(BitwiseEnum._256, BitwiseEnum._256, true)]
    [TestCase(BitwiseEnum._1, BitwiseEnum._2, false)]
    [TestCase(BitwiseEnum._1, BitwiseEnum._4, false)]
    [TestCase(BitwiseEnum._1, BitwiseEnum._8, false)]
    [TestCase(BitwiseEnum._1, BitwiseEnum._16, false)]
    [TestCase(BitwiseEnum._1, BitwiseEnum._32, false)]
    [TestCase(BitwiseEnum._1, BitwiseEnum._64, false)]
    [TestCase(BitwiseEnum._1, BitwiseEnum._128, false)]
    [TestCase(BitwiseEnum._1, BitwiseEnum._256, false)]
    [TestCase(BitwiseEnum._2, BitwiseEnum._1, false)]
    [TestCase(BitwiseEnum._2, BitwiseEnum._4, false)]
    [TestCase(BitwiseEnum._2, BitwiseEnum._8, false)]
    [TestCase(BitwiseEnum._2, BitwiseEnum._16, false)]
    [TestCase(BitwiseEnum._2, BitwiseEnum._32, false)]
    [TestCase(BitwiseEnum._2, BitwiseEnum._64, false)]
    [TestCase(BitwiseEnum._2, BitwiseEnum._128, false)]
    [TestCase(BitwiseEnum._2, BitwiseEnum._256, false)]
    [TestCase(BitwiseEnum._4, BitwiseEnum._1, false)]
    [TestCase(BitwiseEnum._4, BitwiseEnum._2, false)]
    [TestCase(BitwiseEnum._4, BitwiseEnum._8, false)]
    [TestCase(BitwiseEnum._4, BitwiseEnum._16, false)]
    [TestCase(BitwiseEnum._4, BitwiseEnum._32, false)]
    [TestCase(BitwiseEnum._4, BitwiseEnum._64, false)]
    [TestCase(BitwiseEnum._4, BitwiseEnum._128, false)]
    [TestCase(BitwiseEnum._4, BitwiseEnum._256, false)]
    [TestCase(BitwiseEnum._8, BitwiseEnum._1, false)]
    [TestCase(BitwiseEnum._8, BitwiseEnum._2, false)]
    [TestCase(BitwiseEnum._8, BitwiseEnum._4, false)]
    [TestCase(BitwiseEnum._8, BitwiseEnum._16, false)]
    [TestCase(BitwiseEnum._8, BitwiseEnum._32, false)]
    [TestCase(BitwiseEnum._8, BitwiseEnum._64, false)]
    [TestCase(BitwiseEnum._8, BitwiseEnum._128, false)]
    [TestCase(BitwiseEnum._8, BitwiseEnum._256, false)]
    [TestCase(BitwiseEnum._16, BitwiseEnum._1, false)]
    [TestCase(BitwiseEnum._16, BitwiseEnum._2, false)]
    [TestCase(BitwiseEnum._16, BitwiseEnum._4, false)]
    [TestCase(BitwiseEnum._16, BitwiseEnum._8, false)]
    [TestCase(BitwiseEnum._16, BitwiseEnum._32, false)]
    [TestCase(BitwiseEnum._16, BitwiseEnum._64, false)]
    [TestCase(BitwiseEnum._16, BitwiseEnum._128, false)]
    [TestCase(BitwiseEnum._16, BitwiseEnum._256, false)]
    [TestCase(BitwiseEnum._32, BitwiseEnum._1, false)]
    [TestCase(BitwiseEnum._32, BitwiseEnum._2, false)]
    [TestCase(BitwiseEnum._32, BitwiseEnum._4, false)]
    [TestCase(BitwiseEnum._32, BitwiseEnum._8, false)]
    [TestCase(BitwiseEnum._32, BitwiseEnum._16, false)]
    [TestCase(BitwiseEnum._32, BitwiseEnum._64, false)]
    [TestCase(BitwiseEnum._32, BitwiseEnum._128, false)]
    [TestCase(BitwiseEnum._32, BitwiseEnum._256, false)]
    [TestCase(BitwiseEnum._64, BitwiseEnum._1, false)]
    [TestCase(BitwiseEnum._64, BitwiseEnum._2, false)]
    [TestCase(BitwiseEnum._64, BitwiseEnum._4, false)]
    [TestCase(BitwiseEnum._64, BitwiseEnum._8, false)]
    [TestCase(BitwiseEnum._64, BitwiseEnum._16, false)]
    [TestCase(BitwiseEnum._64, BitwiseEnum._32, false)]
    [TestCase(BitwiseEnum._64, BitwiseEnum._128, false)]
    [TestCase(BitwiseEnum._64, BitwiseEnum._256, false)]
    [TestCase(BitwiseEnum._128, BitwiseEnum._1, false)]
    [TestCase(BitwiseEnum._128, BitwiseEnum._2, false)]
    [TestCase(BitwiseEnum._128, BitwiseEnum._4, false)]
    [TestCase(BitwiseEnum._128, BitwiseEnum._8, false)]
    [TestCase(BitwiseEnum._128, BitwiseEnum._16, false)]
    [TestCase(BitwiseEnum._128, BitwiseEnum._32, false)]
    [TestCase(BitwiseEnum._128, BitwiseEnum._64, false)]
    [TestCase(BitwiseEnum._128, BitwiseEnum._256, false)]
    [TestCase(BitwiseEnum._256, BitwiseEnum._1, false)]
    [TestCase(BitwiseEnum._256, BitwiseEnum._2, false)]
    [TestCase(BitwiseEnum._256, BitwiseEnum._4, false)]
    [TestCase(BitwiseEnum._256, BitwiseEnum._8, false)]
    [TestCase(BitwiseEnum._256, BitwiseEnum._16, false)]
    [TestCase(BitwiseEnum._256, BitwiseEnum._32, false)]
    [TestCase(BitwiseEnum._256, BitwiseEnum._64, false)]
    [TestCase(BitwiseEnum._256, BitwiseEnum._128, false)]
    public void IsBitwiseEqual_WhenProvidedInput_EqualsExpectedOutput(
        BitwiseEnum left,
        BitwiseEnum right,
        bool expectedAnswer)
    {
        Assert.AreEqual(expectedAnswer, left.IsBitwiseEqual((int)right));
        Assert.AreEqual(expectedAnswer, right.IsBitwiseEqual((int)left));
    }
}