using NUnit.Framework;
using Tenjin.Extensions;
using Tenjin.Tests.Enums;

namespace Tenjin.Tests.ExtensionsTests
{
    [TestFixture]
    public class ObjectExtensionsTests
    {
        [TestCase(null, "")]
        [TestCase("", null)]
        [TestCase(null, 1)]
        [TestCase(1, null)]
        [TestCase(null, 1.0)]
        [TestCase(1.0, null)]
        [TestCase(null, 1.0f)]
        [TestCase(1.0f, null)]
        [TestCase(null, (long)1)]
        [TestCase((long)1, null)]
        [TestCase(null, (short)1)]
        [TestCase((short)1, null)]
        [TestCase(null, (byte)1)]
        [TestCase((byte)1, null)]
        [TestCase(null, (ulong)1)]
        [TestCase((ulong)1, null)]
        [TestCase(null, (uint)1)]
        [TestCase((uint)1, null)]
        [TestCase(null, (ushort)1)]
        [TestCase((ushort)1, null)]
        [TestCase(null, (char)1)]
        [TestCase((char)1, null)]
        [TestCase(null, true)]
        [TestCase(true, null)]
        [TestCase(null, false)]
        [TestCase(false, null)]
        [TestCase("1", "2")]
        [TestCase("2", "1")]
        [TestCase(true, false)]
        [TestCase(false, true)]
        [TestCase(1, 2)]
        [TestCase(2, 1)]
        [TestCase(1.0, 2.0)]
        [TestCase(2.0, 1.0)]
        [TestCase(1.0f, 2.0f)]
        [TestCase(2.0f, 1.0f)]
        [TestCase((long)1, (long)2)]
        [TestCase((long)2, (long)1)]
        [TestCase((short)1, (short)2)]
        [TestCase((short)2, (short)1)]
        [TestCase((byte)1, (byte)2)]
        [TestCase((byte)2, (byte)1)]
        [TestCase((ulong)1, (long)2)]
        [TestCase((ulong)2, (long)1)]
        [TestCase((uint)1, (uint)2)]
        [TestCase((uint)2, (uint)1)]
        [TestCase((ushort)1, (short)2)]
        [TestCase((ushort)2, (short)1)]
        [TestCase((char)1, (char)2)]
        [TestCase((char)2, (char)1)]
        [TestCase((long)1, 1)]
        [TestCase((long)1, 1.0)]
        [TestCase((long)1, 1.0f)]
        [TestCase((long)1, (byte)1)]
        [TestCase((long)1, (char)1)]
        [TestCase((long)1, (short)1)]
        [TestCase((long)1, (ulong)1)]
        [TestCase((long)1, (uint)1)]
        [TestCase((long)1, (ushort)1)]
        [TestCase((ulong)1, 1)]
        [TestCase((ulong)1, 1.0)]
        [TestCase((ulong)1, 1.0f)]
        [TestCase((ulong)1, (long)1)]
        [TestCase((ulong)1, (byte)1)]
        [TestCase((ulong)1, (char)1)]
        [TestCase((ulong)1, (short)1)]
        [TestCase((ulong)1, (uint)1)]
        [TestCase((ulong)1, (ushort)1)]
        [TestCase(1, 1.0)]
        [TestCase(1, 1.0f)]
        [TestCase(1, (long)1)]
        [TestCase(1, (byte)1)]
        [TestCase(1, (char)1)]
        [TestCase(1, (short)1)]
        [TestCase(1, (uint)1)]
        [TestCase(1, (ushort)1)]
        [TestCase((uint)1, 1)]
        [TestCase((uint)1, 1.0)]
        [TestCase((uint)1, 1.0f)]
        [TestCase((uint)1, (long)1)]
        [TestCase((uint)1, (byte)1)]
        [TestCase((uint)1, (char)1)]
        [TestCase((uint)1, (short)1)]
        [TestCase((uint)1, (ulong)1)]
        [TestCase((uint)1, (ushort)1)]
        [TestCase((short)1, 1)]
        [TestCase((short)1, 1.0)]
        [TestCase((short)1, 1.0f)]
        [TestCase((short)1, (long)1)]
        [TestCase((short)1, (byte)1)]
        [TestCase((short)1, (char)1)]
        [TestCase((short)1, (ulong)1)]
        [TestCase((short)1, (ushort)1)]
        [TestCase((ushort)1, 1)]
        [TestCase((ushort)1, 1.0)]
        [TestCase((ushort)1, 1.0f)]
        [TestCase((ushort)1, (long)1)]
        [TestCase((ushort)1, (byte)1)]
        [TestCase((ushort)1, (char)1)]
        [TestCase((ushort)1, (short)1)]
        [TestCase((ushort)1, (ulong)1)]
        [TestCase((byte)1, 1)]
        [TestCase((byte)1, 1.0)]
        [TestCase((byte)1, 1.0f)]
        [TestCase((byte)1, (long)1)]
        [TestCase((byte)1, (char)1)]
        [TestCase((byte)1, (short)1)]
        [TestCase((byte)1, (ulong)1)]
        [TestCase((byte)1, (ushort)1)]
        [TestCase((char)1, 1)]
        [TestCase((char)1, 1.0f)]
        [TestCase((char)1, (long)1)]
        [TestCase((char)1, (byte)1)]
        [TestCase((char)1, (short)1)]
        [TestCase((char)1, (ulong)1)]
        [TestCase((char)1, (ushort)1)]
        [TestCase(1.0, 1)]
        [TestCase(1.0, 1.0f)]
        [TestCase(1.0, (long)1)]
        [TestCase(1.0, (byte)1)]
        [TestCase(1.0, (char)1)]
        [TestCase(1.0, (short)1)]
        [TestCase(1.0, (ulong)1)]
        [TestCase(1.0, (ushort)1)]
        [TestCase(1.0f, 1)]
        [TestCase(1.0f, 1.0)]
        [TestCase(1.0f, (long)1)]
        [TestCase(1.0f, (byte)1)]
        [TestCase(1.0f, (char)1)]
        [TestCase(1.0f, (short)1)]
        [TestCase(1.0f, (ulong)1)]
        [TestCase(1.0f, (ushort)1)]
        [TestCase(BooleanEnum.False, BooleanEnum.True)]
        [TestCase(BooleanEnum.True, BooleanEnum.False)]
        [TestCase(BooleanEnum.True, 1)]
        [TestCase(BooleanEnum.True, 1.0f)]
        [TestCase(BooleanEnum.True, (long)1)]
        [TestCase(BooleanEnum.True, (byte)1)]
        [TestCase(BooleanEnum.True, (char)1)]
        [TestCase(BooleanEnum.True, (ulong)1)]
        [TestCase(BooleanEnum.True, (short)1)]
        [TestCase(BooleanEnum.True, (ushort)1)]
        public void DoesNotEqual_WhenProvidingNotEqualObjects_ReturnsTrue(object? left, object? right)
        {
            Assert.IsTrue(left.DoesNotEqual(right));
        }
        
        [TestCase(null, new object?[] { null, null })]
        [TestCase(1, new object?[] { 1, 1 })]
        [TestCase(1.0, new object?[] { 1.0, 1.0 })]
        [TestCase(1.0f, new object?[] { 1.0f, 1.0f })]
        [TestCase((long)1, new object?[] { (long)1, (long)1 })]
        [TestCase((short)1, new object?[] { (short)1, (short)1 })]
        [TestCase((byte)1, new object?[] { (byte)1, (byte)1 })]
        [TestCase((char)1, new object?[] { (char)1, (char)1 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, (ulong)1 })]
        [TestCase((uint)1, new object?[] { (uint)1, (uint)1 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, (ushort)1 })]
        [TestCase(true, new object?[] {true, true})]
        [TestCase(false, new object?[] { false, false })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, BooleanEnum.True })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, BooleanEnum.False })]
        public void EqualsAll_WhenProvidingMatchingObjects_ReturnsTrue(
            object? root, 
            object?[] objects)
        {
            Assert.IsTrue(root.EqualsAll(objects));
        }

        [TestCase(null, new object?[] { 1, null })]
        [TestCase(null, new object?[] { null, 1 })]
        [TestCase(1, new object?[] { 2, 1 })]
        [TestCase(1, new object?[] { 2.0, 1.0 })]
        [TestCase(1, new object?[] { 2.0f, 1.0f })]
        [TestCase(1, new object?[] { (byte)2, 1 })]
        [TestCase(1, new object?[] { (char)2, 1 })]
        [TestCase(1, new object?[] { (uint)2, 1 })]
        [TestCase(1, new object?[] { (ushort)2, 1 })]
        [TestCase(1, new object?[] { (ulong)2, 1 })]
        [TestCase(1, new object?[] { (short)2, 1 })]
        [TestCase(1, new object?[] { (long)2, 1 })]
        [TestCase(1, new object?[] { 1, 2 })]
        [TestCase(1, new object?[] { 1.0, 2.0 })]
        [TestCase(1, new object?[] { 1.0f, 2.0f })]
        [TestCase(1, new object?[] { (byte)1, 2 })]
        [TestCase(1, new object?[] { (char)1, 2 })]
        [TestCase(1, new object?[] { (uint)1, 2 })]
        [TestCase(1, new object?[] { (ushort)1, 2 })]
        [TestCase(1, new object?[] { (ulong)1, 2 })]
        [TestCase(1, new object?[] { (short)1, 2 })]
        [TestCase(1, new object?[] { (long)1, 2 })]
        [TestCase(1.0, new object?[] { 2, 1 })]
        [TestCase(1.0, new object?[] { 2.0, 1.0 })]
        [TestCase(1.0, new object?[] { 2.0f, 1.0f })]
        [TestCase(1.0, new object?[] { (byte)2, 1 })]
        [TestCase(1.0, new object?[] { (char)2, 1 })]
        [TestCase(1.0, new object?[] { (uint)2, 1 })]
        [TestCase(1.0, new object?[] { (ushort)2, 1 })]
        [TestCase(1.0, new object?[] { (ulong)2, 1 })]
        [TestCase(1.0, new object?[] { (short)2, 1 })]
        [TestCase(1.0, new object?[] { (long)2, 1 })]
        [TestCase(1.0, new object?[] { 1, 2 })]
        [TestCase(1.0, new object?[] { 1.0, 2.0 })]
        [TestCase(1.0, new object?[] { 1.0f, 2.0f })]
        [TestCase(1.0, new object?[] { (byte)1, 2 })]
        [TestCase(1.0, new object?[] { (char)1, 2 })]
        [TestCase(1.0, new object?[] { (uint)1, 2 })]
        [TestCase(1.0, new object?[] { (ushort)1, 2 })]
        [TestCase(1.0, new object?[] { (ulong)1, 2 })]
        [TestCase(1.0, new object?[] { (short)1, 2 })]
        [TestCase(1.0, new object?[] { (long)1, 2 })]
        [TestCase(1.0f, new object?[] { 2, 1 })]
        [TestCase(1.0f, new object?[] { 2.0, 1.0 })]
        [TestCase(1.0f, new object?[] { 2.0f, 1.0f })]
        [TestCase(1.0f, new object?[] { (byte)2, 1 })]
        [TestCase(1.0f, new object?[] { (char)2, 1 })]
        [TestCase(1.0f, new object?[] { (uint)2, 1 })]
        [TestCase(1.0f, new object?[] { (ushort)2, 1 })]
        [TestCase(1.0f, new object?[] { (ulong)2, 1 })]
        [TestCase(1.0f, new object?[] { (short)2, 1 })]
        [TestCase(1.0f, new object?[] { (long)2, 1 })]
        [TestCase(1.0f, new object?[] { 1, 2 })]
        [TestCase(1.0f, new object?[] { 1.0, 2.0 })]
        [TestCase(1.0f, new object?[] { 1.0f, 2.0f })]
        [TestCase(1.0f, new object?[] { (byte)1, 2 })]
        [TestCase(1.0f, new object?[] { (char)1, 2 })]
        [TestCase(1.0f, new object?[] { (uint)1, 2 })]
        [TestCase(1.0f, new object?[] { (ushort)1, 2 })]
        [TestCase(1.0f, new object?[] { (ulong)1, 2 })]
        [TestCase(1.0f, new object?[] { (short)1, 2 })]
        [TestCase(1.0f, new object?[] { (long)1, 2 })]
        [TestCase((long)1, new object?[] { 2, 1 })]
        [TestCase((long)1, new object?[] { 2.0, 1.0 })]
        [TestCase((long)1, new object?[] { 2.0f, 1.0f })]
        [TestCase((long)1, new object?[] { (byte)2, 1 })]
        [TestCase((long)1, new object?[] { (char)2, 1 })]
        [TestCase((long)1, new object?[] { (uint)2, 1 })]
        [TestCase((long)1, new object?[] { (ushort)2, 1 })]
        [TestCase((long)1, new object?[] { (ulong)2, 1 })]
        [TestCase((long)1, new object?[] { (short)2, 1 })]
        [TestCase((long)1, new object?[] { (long)2, 1 })]
        [TestCase((long)1, new object?[] { 1, 2 })]
        [TestCase((long)1, new object?[] { 1.0, 2.0 })]
        [TestCase((long)1, new object?[] { 1.0f, 2.0f })]
        [TestCase((long)1, new object?[] { (byte)1, 2 })]
        [TestCase((long)1, new object?[] { (char)1, 2 })]
        [TestCase((long)1, new object?[] { (uint)1, 2 })]
        [TestCase((long)1, new object?[] { (ushort)1, 2 })]
        [TestCase((long)1, new object?[] { (ulong)1, 2 })]
        [TestCase((long)1, new object?[] { (short)1, 2 })]
        [TestCase((long)1, new object?[] { (long)1, 2 })]
        [TestCase((short)1, new object?[] { 2, 1 })]
        [TestCase((short)1, new object?[] { 2.0, 1.0 })]
        [TestCase((short)1, new object?[] { 2.0f, 1.0f })]
        [TestCase((short)1, new object?[] { (byte)2, 1 })]
        [TestCase((short)1, new object?[] { (char)2, 1 })]
        [TestCase((short)1, new object?[] { (uint)2, 1 })]
        [TestCase((short)1, new object?[] { (ushort)2, 1 })]
        [TestCase((short)1, new object?[] { (ulong)2, 1 })]
        [TestCase((short)1, new object?[] { (short)2, 1 })]
        [TestCase((short)1, new object?[] { (long)2, 1 })]
        [TestCase((short)1, new object?[] { 1, 2 })]
        [TestCase((short)1, new object?[] { 1.0, 2.0 })]
        [TestCase((short)1, new object?[] { 1.0f, 2.0f })]
        [TestCase((short)1, new object?[] { (byte)1, 2 })]
        [TestCase((short)1, new object?[] { (char)1, 2 })]
        [TestCase((short)1, new object?[] { (uint)1, 2 })]
        [TestCase((short)1, new object?[] { (ushort)1, 2 })]
        [TestCase((short)1, new object?[] { (ulong)1, 2 })]
        [TestCase((short)1, new object?[] { (short)1, 2 })]
        [TestCase((short)1, new object?[] { (long)1, 2 })]
        [TestCase((byte)1, new object?[] { 2, 1 })]
        [TestCase((byte)1, new object?[] { 2.0, 1.0 })]
        [TestCase((byte)1, new object?[] { 2.0f, 1.0f })]
        [TestCase((byte)1, new object?[] { (byte)2, 1 })]
        [TestCase((byte)1, new object?[] { (char)2, 1 })]
        [TestCase((byte)1, new object?[] { (uint)2, 1 })]
        [TestCase((byte)1, new object?[] { (ushort)2, 1 })]
        [TestCase((byte)1, new object?[] { (ulong)2, 1 })]
        [TestCase((byte)1, new object?[] { (short)2, 1 })]
        [TestCase((byte)1, new object?[] { (long)2, 1 })]
        [TestCase((byte)1, new object?[] { 1, 2 })]
        [TestCase((byte)1, new object?[] { 1.0, 2.0 })]
        [TestCase((byte)1, new object?[] { 1.0f, 2.0f })]
        [TestCase((byte)1, new object?[] { (byte)1, 2 })]
        [TestCase((byte)1, new object?[] { (char)1, 2 })]
        [TestCase((byte)1, new object?[] { (uint)1, 2 })]
        [TestCase((byte)1, new object?[] { (ushort)1, 2 })]
        [TestCase((byte)1, new object?[] { (ulong)1, 2 })]
        [TestCase((byte)1, new object?[] { (short)1, 2 })]
        [TestCase((byte)1, new object?[] { (long)1, 2 })]
        [TestCase((char)1, new object?[] { (byte)1, (char)1 })]
        [TestCase((char)1, new object?[] { 2, 1 })]
        [TestCase((char)1, new object?[] { 2.0, 1.0 })]
        [TestCase((char)1, new object?[] { 2.0f, 1.0f })]
        [TestCase((char)1, new object?[] { (byte)2, 1 })]
        [TestCase((char)1, new object?[] { (char)2, 1 })]
        [TestCase((char)1, new object?[] { (uint)2, 1 })]
        [TestCase((char)1, new object?[] { (ushort)2, 1 })]
        [TestCase((char)1, new object?[] { (ulong)2, 1 })]
        [TestCase((char)1, new object?[] { (short)2, 1 })]
        [TestCase((char)1, new object?[] { (long)2, 1 })]
        [TestCase((char)1, new object?[] { 1, 2 })]
        [TestCase((char)1, new object?[] { 1.0, 2.0 })]
        [TestCase((char)1, new object?[] { 1.0f, 2.0f })]
        [TestCase((char)1, new object?[] { (byte)1, 2 })]
        [TestCase((char)1, new object?[] { (char)1, 2 })]
        [TestCase((char)1, new object?[] { (uint)1, 2 })]
        [TestCase((char)1, new object?[] { (ushort)1, 2 })]
        [TestCase((char)1, new object?[] { (ulong)1, 2 })]
        [TestCase((char)1, new object?[] { (short)1, 2 })]
        [TestCase((char)1, new object?[] { (long)1, 2 })]
        [TestCase((ulong)1, new object?[] { (long)1, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { 2, 1 })]
        [TestCase((ulong)1, new object?[] { 2.0, 1.0 })]
        [TestCase((ulong)1, new object?[] { 2.0f, 1.0f })]
        [TestCase((ulong)1, new object?[] { (byte)2, 1 })]
        [TestCase((ulong)1, new object?[] { (char)2, 1 })]
        [TestCase((ulong)1, new object?[] { (uint)2, 1 })]
        [TestCase((ulong)1, new object?[] { (ushort)2, 1 })]
        [TestCase((ulong)1, new object?[] { (ulong)2, 1 })]
        [TestCase((ulong)1, new object?[] { (short)2, 1 })]
        [TestCase((ulong)1, new object?[] { (long)2, 1 })]
        [TestCase((ulong)1, new object?[] { 1, 2 })]
        [TestCase((ulong)1, new object?[] { 1.0, 2.0 })]
        [TestCase((ulong)1, new object?[] { 1.0f, 2.0f })]
        [TestCase((ulong)1, new object?[] { (byte)1, 2 })]
        [TestCase((ulong)1, new object?[] { (char)1, 2 })]
        [TestCase((ulong)1, new object?[] { (uint)1, 2 })]
        [TestCase((ulong)1, new object?[] { (ushort)1, 2 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, 2 })]
        [TestCase((ulong)1, new object?[] { (short)1, 2 })]
        [TestCase((ulong)1, new object?[] { (long)1, 2 })]
        [TestCase((uint)1, new object?[] { 1, (uint)1 })]
        [TestCase((uint)1, new object?[] { 2, 1 })]
        [TestCase((uint)1, new object?[] { 2.0, 1.0 })]
        [TestCase((uint)1, new object?[] { 2.0f, 1.0f })]
        [TestCase((uint)1, new object?[] { (byte)2, 1 })]
        [TestCase((uint)1, new object?[] { (char)2, 1 })]
        [TestCase((uint)1, new object?[] { (uint)2, 1 })]
        [TestCase((uint)1, new object?[] { (ushort)2, 1 })]
        [TestCase((uint)1, new object?[] { (ulong)2, 1 })]
        [TestCase((uint)1, new object?[] { (short)2, 1 })]
        [TestCase((uint)1, new object?[] { (long)2, 1 })]
        [TestCase((uint)1, new object?[] { 1, 2 })]
        [TestCase((uint)1, new object?[] { 1.0, 2.0 })]
        [TestCase((uint)1, new object?[] { 1.0f, 2.0f })]
        [TestCase((uint)1, new object?[] { (byte)1, 2 })]
        [TestCase((uint)1, new object?[] { (char)1, 2 })]
        [TestCase((uint)1, new object?[] { (uint)1, 2 })]
        [TestCase((uint)1, new object?[] { (ushort)1, 2 })]
        [TestCase((uint)1, new object?[] { (ulong)1, 2 })]
        [TestCase((uint)1, new object?[] { (short)1, 2 })]
        [TestCase((uint)1, new object?[] { (long)1, 2 })]
        [TestCase((ushort)1, new object?[] { (short)1, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { 2, 1 })]
        [TestCase((ushort)1, new object?[] { 2.0, 1.0 })]
        [TestCase((ushort)1, new object?[] { 2.0f, 1.0f })]
        [TestCase((ushort)1, new object?[] { (byte)2, 1 })]
        [TestCase((ushort)1, new object?[] { (char)2, 1 })]
        [TestCase((ushort)1, new object?[] { (uint)2, 1 })]
        [TestCase((ushort)1, new object?[] { (ushort)2, 1 })]
        [TestCase((ushort)1, new object?[] { (ulong)2, 1 })]
        [TestCase((ushort)1, new object?[] { (short)2, 1 })]
        [TestCase((ushort)1, new object?[] { (long)2, 1 })]
        [TestCase((ushort)1, new object?[] { 1, 2 })]
        [TestCase((ushort)1, new object?[] { 1.0, 2.0 })]
        [TestCase((ushort)1, new object?[] { 1.0f, 2.0f })]
        [TestCase((ushort)1, new object?[] { (byte)1, 2 })]
        [TestCase((ushort)1, new object?[] { (char)1, 2 })]
        [TestCase((ushort)1, new object?[] { (uint)1, 2 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, 2 })]
        [TestCase((ushort)1, new object?[] { (ulong)1, 2 })]
        [TestCase((ushort)1, new object?[] { (short)1, 2 })]
        [TestCase((ushort)1, new object?[] { (long)1, 2 })]
        [TestCase(true, new object?[] { false, true })]
        [TestCase(true, new object?[] { 2, 1 })]
        [TestCase(true, new object?[] { 2.0, 1.0 })]
        [TestCase(true, new object?[] { 2.0f, 1.0f })]
        [TestCase(true, new object?[] { (byte)2, 1 })]
        [TestCase(true, new object?[] { (char)2, 1 })]
        [TestCase(true, new object?[] { (uint)2, 1 })]
        [TestCase(true, new object?[] { (ushort)2, 1 })]
        [TestCase(true, new object?[] { (ulong)2, 1 })]
        [TestCase(true, new object?[] { (short)2, 1 })]
        [TestCase(true, new object?[] { (long)2, 1 })]
        [TestCase(true, new object?[] { 1, 2 })]
        [TestCase(true, new object?[] { 1.0, 2.0 })]
        [TestCase(true, new object?[] { 1.0f, 2.0f })]
        [TestCase(true, new object?[] { (byte)1, 2 })]
        [TestCase(true, new object?[] { (char)1, 2 })]
        [TestCase(true, new object?[] { (uint)1, 2 })]
        [TestCase(true, new object?[] { (ushort)1, 2 })]
        [TestCase(true, new object?[] { (ulong)1, 2 })]
        [TestCase(true, new object?[] { (short)1, 2 })]
        [TestCase(true, new object?[] { (long)1, 2 })]
        [TestCase(false, new object?[] { true, false })]
        [TestCase(false, new object?[] { 2, 1 })]
        [TestCase(false, new object?[] { 2.0, 1.0 })]
        [TestCase(false, new object?[] { 2.0f, 1.0f })]
        [TestCase(false, new object?[] { (byte)2, 1 })]
        [TestCase(false, new object?[] { (char)2, 1 })]
        [TestCase(false, new object?[] { (uint)2, 1 })]
        [TestCase(false, new object?[] { (ushort)2, 1 })]
        [TestCase(false, new object?[] { (ulong)2, 1 })]
        [TestCase(false, new object?[] { (short)2, 1 })]
        [TestCase(false, new object?[] { (long)2, 1 })]
        [TestCase(false, new object?[] { 1, 2 })]
        [TestCase(false, new object?[] { 1.0, 2.0 })]
        [TestCase(false, new object?[] { 1.0f, 2.0f })]
        [TestCase(false, new object?[] { (byte)1, 2 })]
        [TestCase(false, new object?[] { (char)1, 2 })]
        [TestCase(false, new object?[] { (uint)1, 2 })]
        [TestCase(false, new object?[] { (ushort)1, 2 })]
        [TestCase(false, new object?[] { (ulong)1, 2 })]
        [TestCase(false, new object?[] { (short)1, 2 })]
        [TestCase(false, new object?[] { (long)1, 2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.False, BooleanEnum.True })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.True, BooleanEnum.False })]
        public void EqualsAll_WhenProvidingNonMatchingObjects_ReturnsFalse(
            object? root,
            object?[] objects)
        {
            Assert.IsFalse(root.EqualsAll(objects));
        }

        [TestCase(null, new object?[] { null, null })]
        [TestCase(null, new object?[] { null, 1 })]
        [TestCase(1, new object?[] { 2, 1 })]
        [TestCase(1, new object?[] { 2.0, 1 })]
        [TestCase(1, new object?[] { 2.0f, 1 })]
        [TestCase(1, new object?[] { (byte)2, 1 })]
        [TestCase(1, new object?[] { (char)2, 1 })]
        [TestCase(1, new object?[] { (uint)2, 1 })]
        [TestCase(1, new object?[] { (ushort)2, 1 })]
        [TestCase(1, new object?[] { (ulong)2, 1 })]
        [TestCase(1, new object?[] { (short)2, 1 })]
        [TestCase(1, new object?[] { (long)2, 1 })]
        [TestCase(1, new object?[] { 1, 2 })]
        [TestCase(1, new object?[] { 1, 2.0 })]
        [TestCase(1, new object?[] { 1, 2.0f })]
        [TestCase(1, new object?[] { 1, (byte)2})]
        [TestCase(1, new object?[] { 1, (char)2})]
        [TestCase(1, new object?[] { 1, (uint)2})]
        [TestCase(1, new object?[] { 1, (ushort)2})]
        [TestCase(1, new object?[] { 1, (ulong)2})]
        [TestCase(1, new object?[] { 1, (short)2})]
        [TestCase(1, new object?[] { 1, (long)2})]
        [TestCase(1.0, new object?[] { 2, 1.0 })]
        [TestCase(1.0, new object?[] { 2.0, 1.0 })]
        [TestCase(1.0, new object?[] { 2.0f, 1.0 })]
        [TestCase(1.0, new object?[] { (byte)2, 1.0 })]
        [TestCase(1.0, new object?[] { (char)2, 1.0 })]
        [TestCase(1.0, new object?[] { (uint)2, 1.0 })]
        [TestCase(1.0, new object?[] { (ushort)2, 1.0 })]
        [TestCase(1.0, new object?[] { (ulong)2, 1.0 })]
        [TestCase(1.0, new object?[] { (short)2, 1.0 })]
        [TestCase(1.0, new object?[] { (long)2, 1.0 })]
        [TestCase(1.0, new object?[] { 1.0, 2 })]
        [TestCase(1.0, new object?[] { 1.0, 2.0 })]
        [TestCase(1.0, new object?[] { 1.0, 2.0f })]
        [TestCase(1.0, new object?[] { 1.0, (byte)2 })]
        [TestCase(1.0, new object?[] { 1.0, (char)2 })]
        [TestCase(1.0, new object?[] { 1.0, (uint)2 })]
        [TestCase(1.0, new object?[] { 1.0, (ushort)2 })]
        [TestCase(1.0, new object?[] { 1.0, (ulong)2 })]
        [TestCase(1.0, new object?[] { 1.0, (short)2 })]
        [TestCase(1.0, new object?[] { 1.0, (long)2 })]
        [TestCase(1.0f, new object?[] { 2, 1.0f })]
        [TestCase(1.0f, new object?[] { 2.0, 1.0f })]
        [TestCase(1.0f, new object?[] { 2.0f, 1.0f })]
        [TestCase(1.0f, new object?[] { (byte)2, 1.0f })]
        [TestCase(1.0f, new object?[] { (char)2, 1.0f })]
        [TestCase(1.0f, new object?[] { (uint)2, 1.0f })]
        [TestCase(1.0f, new object?[] { (ushort)2, 1.0f })]
        [TestCase(1.0f, new object?[] { (ulong)2, 1.0f })]
        [TestCase(1.0f, new object?[] { (short)2, 1.0f })]
        [TestCase(1.0f, new object?[] { (long)2, 1.0f })]
        [TestCase(1.0f, new object?[] { 1.0f, 2 })]
        [TestCase(1.0f, new object?[] { 1.0f, 2.0 })]
        [TestCase(1.0f, new object?[] { 1.0f, 2.0f })]
        [TestCase(1.0f, new object?[] { 1.0f, (byte)2 })]
        [TestCase(1.0f, new object?[] { 1.0f, (char)2 })]
        [TestCase(1.0f, new object?[] { 1.0f, (uint)2 })]
        [TestCase(1.0f, new object?[] { 1.0f, (ushort)2 })]
        [TestCase(1.0f, new object?[] { 1.0f, (ulong)2 })]
        [TestCase(1.0f, new object?[] { 1.0f, (short)2 })]
        [TestCase(1.0f, new object?[] { 1.0f, (long)2 })]
        [TestCase((long)1, new object?[] { 2, (long)1 })]
        [TestCase((long)1, new object?[] { 2.0, (long)1 })]
        [TestCase((long)1, new object?[] { 2.0f, (long)1 })]
        [TestCase((long)1, new object?[] { (byte)2, (long)1 })]
        [TestCase((long)1, new object?[] { (char)2, (long)1 })]
        [TestCase((long)1, new object?[] { (uint)2, (long)1 })]
        [TestCase((long)1, new object?[] { (ushort)2, (long)1 })]
        [TestCase((long)1, new object?[] { (ulong)2, (long)1 })]
        [TestCase((long)1, new object?[] { (short)2, (long)1 })]
        [TestCase((long)1, new object?[] { (long)2, (long)1 })]
        [TestCase((long)1, new object?[] { (long)1, 2 })]
        [TestCase((long)1, new object?[] { (long)1, 2.0 })]
        [TestCase((long)1, new object?[] { (long)1, 2.0f })]
        [TestCase((long)1, new object?[] { (long)1, (byte)2 })]
        [TestCase((long)1, new object?[] { (long)1, (char)2 })]
        [TestCase((long)1, new object?[] { (long)1, (uint)2 })]
        [TestCase((long)1, new object?[] { (long)1, (ushort)2 })]
        [TestCase((long)1, new object?[] { (long)1, (ulong)2 })]
        [TestCase((long)1, new object?[] { (long)1, (short)2 })]
        [TestCase((long)1, new object?[] { (long)1, (long)2 })]
        [TestCase((short)1, new object?[] { 2, (short)1 })]
        [TestCase((short)1, new object?[] { 2.0, (short)1 })]
        [TestCase((short)1, new object?[] { 2.0f, (short)1 })]
        [TestCase((short)1, new object?[] { (byte)2, (short)1 })]
        [TestCase((short)1, new object?[] { (char)2, (short)1 })]
        [TestCase((short)1, new object?[] { (uint)2, (short)1 })]
        [TestCase((short)1, new object?[] { (ushort)2, (short)1 })]
        [TestCase((short)1, new object?[] { (ulong)2, (short)1 })]
        [TestCase((short)1, new object?[] { (short)2, (short)1 })]
        [TestCase((short)1, new object?[] { (long)2, (short)1 })]
        [TestCase((short)1, new object?[] { (short)1, 2 })]
        [TestCase((short)1, new object?[] { (short)1, 2.0 })]
        [TestCase((short)1, new object?[] { (short)1, 2.0f })]
        [TestCase((short)1, new object?[] { (short)1, (byte)2 })]
        [TestCase((short)1, new object?[] { (short)1, (char)2 })]
        [TestCase((short)1, new object?[] { (short)1, (uint)2 })]
        [TestCase((short)1, new object?[] { (short)1, (ushort)2 })]
        [TestCase((short)1, new object?[] { (short)1, (ulong)2 })]
        [TestCase((short)1, new object?[] { (short)1, (short)2 })]
        [TestCase((short)1, new object?[] { (short)1, (long)2 })]
        [TestCase((byte)1, new object?[] { 2, (byte)1 })]
        [TestCase((byte)1, new object?[] { 2.0, (byte)1 })]
        [TestCase((byte)1, new object?[] { 2.0f, (byte)1 })]
        [TestCase((byte)1, new object?[] { (byte)2, (byte)1 })]
        [TestCase((byte)1, new object?[] { (char)2, (byte)1 })]
        [TestCase((byte)1, new object?[] { (uint)2, (byte)1 })]
        [TestCase((byte)1, new object?[] { (ushort)2, (byte)1 })]
        [TestCase((byte)1, new object?[] { (ulong)2, (byte)1 })]
        [TestCase((byte)1, new object?[] { (byte)2, (byte)1 })]
        [TestCase((byte)1, new object?[] { (long)2, (byte)1 })]
        [TestCase((byte)1, new object?[] { (byte)1, 2 })]
        [TestCase((byte)1, new object?[] { (byte)1, 2.0 })]
        [TestCase((byte)1, new object?[] { (byte)1, 2.0f })]
        [TestCase((byte)1, new object?[] { (byte)1, (byte)2 })]
        [TestCase((byte)1, new object?[] { (byte)1, (char)2 })]
        [TestCase((byte)1, new object?[] { (byte)1, (uint)2 })]
        [TestCase((byte)1, new object?[] { (byte)1, (ushort)2 })]
        [TestCase((byte)1, new object?[] { (byte)1, (ulong)2 })]
        [TestCase((byte)1, new object?[] { (byte)1, (byte)2 })]
        [TestCase((byte)1, new object?[] { (byte)1, (long)2 })]
        [TestCase((char)1, new object?[] { 2, (char)1 })]
        [TestCase((char)1, new object?[] { 2.0, (char)1 })]
        [TestCase((char)1, new object?[] { 2.0f, (char)1 })]
        [TestCase((char)1, new object?[] { (char)2, (char)1 })]
        [TestCase((char)1, new object?[] { (char)2, (char)1 })]
        [TestCase((char)1, new object?[] { (uint)2, (char)1 })]
        [TestCase((char)1, new object?[] { (ushort)2, (char)1 })]
        [TestCase((char)1, new object?[] { (ulong)2, (char)1 })]
        [TestCase((char)1, new object?[] { (char)2, (char)1 })]
        [TestCase((char)1, new object?[] { (long)2, (char)1 })]
        [TestCase((char)1, new object?[] { (char)1, 2 })]
        [TestCase((char)1, new object?[] { (char)1, 2.0 })]
        [TestCase((char)1, new object?[] { (char)1, 2.0f })]
        [TestCase((char)1, new object?[] { (char)1, (char)2 })]
        [TestCase((char)1, new object?[] { (char)1, (char)2 })]
        [TestCase((char)1, new object?[] { (char)1, (uint)2 })]
        [TestCase((char)1, new object?[] { (char)1, (ushort)2 })]
        [TestCase((char)1, new object?[] { (char)1, (ulong)2 })]
        [TestCase((char)1, new object?[] { (char)1, (char)2 })]
        [TestCase((char)1, new object?[] { (char)1, (long)2 })]
        [TestCase((ulong)1, new object?[] { 2, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { 2.0, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { 2.0f, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { (ulong)2, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { (char)2, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { (uint)2, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { (ushort)2, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { (ulong)2, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { (ulong)2, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { (long)2, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, 2 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, 2.0 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, 2.0f })]
        [TestCase((ulong)1, new object?[] { (ulong)1, (ulong)2 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, (char)2 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, (uint)2 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, (ushort)2 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, (ulong)2 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, (ulong)2 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, (long)2 })]
        [TestCase((uint)1, new object?[] { 2, (uint)1 })]
        [TestCase((uint)1, new object?[] { 2.0, (uint)1 })]
        [TestCase((uint)1, new object?[] { 2.0f, (uint)1 })]
        [TestCase((uint)1, new object?[] { (uint)2, (uint)1 })]
        [TestCase((uint)1, new object?[] { (char)2, (uint)1 })]
        [TestCase((uint)1, new object?[] { (uint)2, (uint)1 })]
        [TestCase((uint)1, new object?[] { (ushort)2, (uint)1 })]
        [TestCase((uint)1, new object?[] { (ulong)2, (uint)1 })]
        [TestCase((uint)1, new object?[] { (uint)2, (uint)1 })]
        [TestCase((uint)1, new object?[] { (long)2, (uint)1 })]
        [TestCase((uint)1, new object?[] { (uint)1, 2 })]
        [TestCase((uint)1, new object?[] { (uint)1, 2.0 })]
        [TestCase((uint)1, new object?[] { (uint)1, 2.0f })]
        [TestCase((uint)1, new object?[] { (uint)1, (uint)2 })]
        [TestCase((uint)1, new object?[] { (uint)1, (char)2 })]
        [TestCase((uint)1, new object?[] { (uint)1, (uint)2 })]
        [TestCase((uint)1, new object?[] { (uint)1, (ushort)2 })]
        [TestCase((uint)1, new object?[] { (uint)1, (ulong)2 })]
        [TestCase((uint)1, new object?[] { (uint)1, (uint)2 })]
        [TestCase((uint)1, new object?[] { (uint)1, (long)2 })]
        [TestCase((ushort)1, new object?[] { 2, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { 2.0, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { 2.0f, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { (ushort)2, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { (char)2, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { (uint)2, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { (ushort)2, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { (ulong)2, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { (ushort)2, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { (long)2, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, 2 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, 2.0 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, 2.0f })]
        [TestCase((ushort)1, new object?[] { (ushort)1, (ushort)2 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, (char)2 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, (uint)2 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, (ushort)2 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, (ulong)2 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, (ushort)2 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, (long)2 })]
        [TestCase(true, new object?[] { 2, true })]
        [TestCase(true, new object?[] { 2.0, true })]
        [TestCase(true, new object?[] { 2.0f, true })]
        [TestCase(true, new object?[] { (byte)2, true })]
        [TestCase(true, new object?[] { (char)2, true })]
        [TestCase(true, new object?[] { (uint)2, true })]
        [TestCase(true, new object?[] { (ushort)2, true })]
        [TestCase(true, new object?[] { (ulong)2, true })]
        [TestCase(true, new object?[] { (byte)2, true })]
        [TestCase(true, new object?[] { (long)2, true })]
        [TestCase(true, new object?[] { true, 2 })]
        [TestCase(true, new object?[] { true, 2.0 })]
        [TestCase(true, new object?[] { true, 2.0f })]
        [TestCase(true, new object?[] { true, (byte)2 })]
        [TestCase(true, new object?[] { true, (char)2 })]
        [TestCase(true, new object?[] { true, (uint)2 })]
        [TestCase(true, new object?[] { true, (ushort)2 })]
        [TestCase(true, new object?[] { true, (ulong)2 })]
        [TestCase(true, new object?[] { true, (byte)2 })]
        [TestCase(true, new object?[] { true, (long)2 })]
        [TestCase(false, new object?[] { 2, false })]
        [TestCase(false, new object?[] { 2.0, false })]
        [TestCase(false, new object?[] { 2.0f, false })]
        [TestCase(false, new object?[] { (byte)2, false })]
        [TestCase(false, new object?[] { (char)2, false })]
        [TestCase(false, new object?[] { (uint)2, false })]
        [TestCase(false, new object?[] { (ushort)2, false })]
        [TestCase(false, new object?[] { (ulong)2, false })]
        [TestCase(false, new object?[] { (byte)2, false })]
        [TestCase(false, new object?[] { (long)2, false })]
        [TestCase(false, new object?[] { false, 2 })]
        [TestCase(false, new object?[] { false, 2.0 })]
        [TestCase(false, new object?[] { false, 2.0f })]
        [TestCase(false, new object?[] { false, (byte)2 })]
        [TestCase(false, new object?[] { false, (char)2 })]
        [TestCase(false, new object?[] { false, (uint)2 })]
        [TestCase(false, new object?[] { false, (ushort)2 })]
        [TestCase(false, new object?[] { false, (ulong)2 })]
        [TestCase(false, new object?[] { false, (byte)2 })]
        [TestCase(false, new object?[] { false, (long)2 })]
        [TestCase(BooleanEnum.True, new object?[] { 2, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { 2.0, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { 2.0f, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { (byte)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { (char)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { (uint)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { (ushort)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { (ulong)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { (byte)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { (long)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, 2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, 2.0 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, 2.0f })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, (byte)2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, (char)2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, (uint)2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, (ushort)2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, (ulong)2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, (byte)2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, (long)2 })]
        [TestCase(BooleanEnum.False, new object?[] { 2, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { 2.0, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { 2.0f, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { (byte)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { (char)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { (uint)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { (ushort)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { (ulong)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { (byte)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { (long)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, 2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, 2.0 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, 2.0f })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, (byte)2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, (char)2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, (uint)2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, (ushort)2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, (ulong)2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, (byte)2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, (long)2 })]
        public void EqualsAll_WhenProvidingSomeMatchingObjects_ReturnsTrue(
            object? root,
            object?[] objects)
        {
            Assert.IsTrue(root.EqualsAny(objects));
        }

        [TestCase(null, new object?[] { 1, null })]
        [TestCase(null, new object?[] { null, 1 })]
        [TestCase(1, new object?[] { 2, 1 })]
        [TestCase(1, new object?[] { 2.0, 1 })]
        [TestCase(1, new object?[] { 2.0f, 1 })]
        [TestCase(1, new object?[] { (byte)2, 1 })]
        [TestCase(1, new object?[] { (char)2, 1 })]
        [TestCase(1, new object?[] { (uint)2, 1 })]
        [TestCase(1, new object?[] { (ushort)2, 1 })]
        [TestCase(1, new object?[] { (ulong)2, 1 })]
        [TestCase(1, new object?[] { (short)2, 1 })]
        [TestCase(1, new object?[] { (long)2, 1 })]
        [TestCase(1, new object?[] { 1, 2 })]
        [TestCase(1, new object?[] { 1, 2.0 })]
        [TestCase(1, new object?[] { 1, 2.0f })]
        [TestCase(1, new object?[] { 1, (byte)2 })]
        [TestCase(1, new object?[] { 1, (char)2 })]
        [TestCase(1, new object?[] { 1, (uint)2 })]
        [TestCase(1, new object?[] { 1, (ushort)2 })]
        [TestCase(1, new object?[] { 1, (ulong)2 })]
        [TestCase(1, new object?[] { 1, (short)2 })]
        [TestCase(1, new object?[] { 1, (long)2 })]
        [TestCase(1.0, new object?[] { 2, 1.0 })]
        [TestCase(1.0, new object?[] { 2.0, 1.0 })]
        [TestCase(1.0, new object?[] { 2.0f, 1.0 })]
        [TestCase(1.0, new object?[] { (byte)2, 1.0 })]
        [TestCase(1.0, new object?[] { (char)2, 1.0 })]
        [TestCase(1.0, new object?[] { (uint)2, 1.0 })]
        [TestCase(1.0, new object?[] { (ushort)2, 1.0 })]
        [TestCase(1.0, new object?[] { (ulong)2, 1.0 })]
        [TestCase(1.0, new object?[] { (short)2, 1.0 })]
        [TestCase(1.0, new object?[] { (long)2, 1.0 })]
        [TestCase(1.0, new object?[] { 1.0, 2 })]
        [TestCase(1.0, new object?[] { 1.0, 2.0 })]
        [TestCase(1.0, new object?[] { 1.0, 2.0f })]
        [TestCase(1.0, new object?[] { 1.0, (byte)2 })]
        [TestCase(1.0, new object?[] { 1.0, (char)2 })]
        [TestCase(1.0, new object?[] { 1.0, (uint)2 })]
        [TestCase(1.0, new object?[] { 1.0, (ushort)2 })]
        [TestCase(1.0, new object?[] { 1.0, (ulong)2 })]
        [TestCase(1.0, new object?[] { 1.0, (short)2 })]
        [TestCase(1.0, new object?[] { 1.0, (long)2 })]
        [TestCase(1.0f, new object?[] { 2, 1.0f })]
        [TestCase(1.0f, new object?[] { 2.0, 1.0f })]
        [TestCase(1.0f, new object?[] { 2.0f, 1.0f })]
        [TestCase(1.0f, new object?[] { (byte)2, 1.0f })]
        [TestCase(1.0f, new object?[] { (char)2, 1.0f })]
        [TestCase(1.0f, new object?[] { (uint)2, 1.0f })]
        [TestCase(1.0f, new object?[] { (ushort)2, 1.0f })]
        [TestCase(1.0f, new object?[] { (ulong)2, 1.0f })]
        [TestCase(1.0f, new object?[] { (short)2, 1.0f })]
        [TestCase(1.0f, new object?[] { (long)2, 1.0f })]
        [TestCase(1.0f, new object?[] { 1.0f, 2 })]
        [TestCase(1.0f, new object?[] { 1.0f, 2.0 })]
        [TestCase(1.0f, new object?[] { 1.0f, 2.0f })]
        [TestCase(1.0f, new object?[] { 1.0f, (byte)2 })]
        [TestCase(1.0f, new object?[] { 1.0f, (char)2 })]
        [TestCase(1.0f, new object?[] { 1.0f, (uint)2 })]
        [TestCase(1.0f, new object?[] { 1.0f, (ushort)2 })]
        [TestCase(1.0f, new object?[] { 1.0f, (ulong)2 })]
        [TestCase(1.0f, new object?[] { 1.0f, (short)2 })]
        [TestCase(1.0f, new object?[] { 1.0f, (long)2 })]
        [TestCase((long)1, new object?[] { 2, (long)1 })]
        [TestCase((long)1, new object?[] { 2.0, (long)1 })]
        [TestCase((long)1, new object?[] { 2.0f, (long)1 })]
        [TestCase((long)1, new object?[] { (byte)2, (long)1 })]
        [TestCase((long)1, new object?[] { (char)2, (long)1 })]
        [TestCase((long)1, new object?[] { (uint)2, (long)1 })]
        [TestCase((long)1, new object?[] { (ushort)2, (long)1 })]
        [TestCase((long)1, new object?[] { (ulong)2, (long)1 })]
        [TestCase((long)1, new object?[] { (short)2, (long)1 })]
        [TestCase((long)1, new object?[] { (long)2, (long)1 })]
        [TestCase((long)1, new object?[] { (long)1, 2 })]
        [TestCase((long)1, new object?[] { (long)1, 2.0 })]
        [TestCase((long)1, new object?[] { (long)1, 2.0f })]
        [TestCase((long)1, new object?[] { (long)1, (byte)2 })]
        [TestCase((long)1, new object?[] { (long)1, (char)2 })]
        [TestCase((long)1, new object?[] { (long)1, (uint)2 })]
        [TestCase((long)1, new object?[] { (long)1, (ushort)2 })]
        [TestCase((long)1, new object?[] { (long)1, (ulong)2 })]
        [TestCase((long)1, new object?[] { (long)1, (short)2 })]
        [TestCase((long)1, new object?[] { (long)1, (long)2 })]
        [TestCase((short)1, new object?[] { 2, (short)1 })]
        [TestCase((short)1, new object?[] { 2.0, (short)1 })]
        [TestCase((short)1, new object?[] { 2.0f, (short)1 })]
        [TestCase((short)1, new object?[] { (byte)2, (short)1 })]
        [TestCase((short)1, new object?[] { (char)2, (short)1 })]
        [TestCase((short)1, new object?[] { (uint)2, (short)1 })]
        [TestCase((short)1, new object?[] { (ushort)2, (short)1 })]
        [TestCase((short)1, new object?[] { (ulong)2, (short)1 })]
        [TestCase((short)1, new object?[] { (short)2, (short)1 })]
        [TestCase((short)1, new object?[] { (long)2, (short)1 })]
        [TestCase((short)1, new object?[] { (short)1, 2 })]
        [TestCase((short)1, new object?[] { (short)1, 2.0 })]
        [TestCase((short)1, new object?[] { (short)1, 2.0f })]
        [TestCase((short)1, new object?[] { (short)1, (byte)2 })]
        [TestCase((short)1, new object?[] { (short)1, (char)2 })]
        [TestCase((short)1, new object?[] { (short)1, (uint)2 })]
        [TestCase((short)1, new object?[] { (short)1, (ushort)2 })]
        [TestCase((short)1, new object?[] { (short)1, (ulong)2 })]
        [TestCase((short)1, new object?[] { (short)1, (short)2 })]
        [TestCase((short)1, new object?[] { (short)1, (long)2 })]
        [TestCase((byte)1, new object?[] { 2, (byte)1 })]
        [TestCase((byte)1, new object?[] { 2.0, (byte)1 })]
        [TestCase((byte)1, new object?[] { 2.0f, (byte)1 })]
        [TestCase((byte)1, new object?[] { (byte)2, (byte)1 })]
        [TestCase((byte)1, new object?[] { (char)2, (byte)1 })]
        [TestCase((byte)1, new object?[] { (uint)2, (byte)1 })]
        [TestCase((byte)1, new object?[] { (ushort)2, (byte)1 })]
        [TestCase((byte)1, new object?[] { (ulong)2, (byte)1 })]
        [TestCase((byte)1, new object?[] { (byte)2, (byte)1 })]
        [TestCase((byte)1, new object?[] { (long)2, (byte)1 })]
        [TestCase((byte)1, new object?[] { (byte)1, 2 })]
        [TestCase((byte)1, new object?[] { (byte)1, 2.0 })]
        [TestCase((byte)1, new object?[] { (byte)1, 2.0f })]
        [TestCase((byte)1, new object?[] { (byte)1, (byte)2 })]
        [TestCase((byte)1, new object?[] { (byte)1, (char)2 })]
        [TestCase((byte)1, new object?[] { (byte)1, (uint)2 })]
        [TestCase((byte)1, new object?[] { (byte)1, (ushort)2 })]
        [TestCase((byte)1, new object?[] { (byte)1, (ulong)2 })]
        [TestCase((byte)1, new object?[] { (byte)1, (byte)2 })]
        [TestCase((byte)1, new object?[] { (byte)1, (long)2 })]
        [TestCase((char)1, new object?[] { 2, (char)1 })]
        [TestCase((char)1, new object?[] { 2.0, (char)1 })]
        [TestCase((char)1, new object?[] { 2.0f, (char)1 })]
        [TestCase((char)1, new object?[] { (char)2, (char)1 })]
        [TestCase((char)1, new object?[] { (char)2, (char)1 })]
        [TestCase((char)1, new object?[] { (uint)2, (char)1 })]
        [TestCase((char)1, new object?[] { (ushort)2, (char)1 })]
        [TestCase((char)1, new object?[] { (ulong)2, (char)1 })]
        [TestCase((char)1, new object?[] { (char)2, (char)1 })]
        [TestCase((char)1, new object?[] { (long)2, (char)1 })]
        [TestCase((char)1, new object?[] { (char)1, 2 })]
        [TestCase((char)1, new object?[] { (char)1, 2.0 })]
        [TestCase((char)1, new object?[] { (char)1, 2.0f })]
        [TestCase((char)1, new object?[] { (char)1, (char)2 })]
        [TestCase((char)1, new object?[] { (char)1, (char)2 })]
        [TestCase((char)1, new object?[] { (char)1, (uint)2 })]
        [TestCase((char)1, new object?[] { (char)1, (ushort)2 })]
        [TestCase((char)1, new object?[] { (char)1, (ulong)2 })]
        [TestCase((char)1, new object?[] { (char)1, (char)2 })]
        [TestCase((char)1, new object?[] { (char)1, (long)2 })]
        [TestCase((ulong)1, new object?[] { 2, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { 2.0, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { 2.0f, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { (ulong)2, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { (char)2, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { (uint)2, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { (ushort)2, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { (ulong)2, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { (ulong)2, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { (long)2, (ulong)1 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, 2 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, 2.0 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, 2.0f })]
        [TestCase((ulong)1, new object?[] { (ulong)1, (ulong)2 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, (char)2 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, (uint)2 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, (ushort)2 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, (ulong)2 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, (ulong)2 })]
        [TestCase((ulong)1, new object?[] { (ulong)1, (long)2 })]
        [TestCase((uint)1, new object?[] { 2, (uint)1 })]
        [TestCase((uint)1, new object?[] { 2.0, (uint)1 })]
        [TestCase((uint)1, new object?[] { 2.0f, (uint)1 })]
        [TestCase((uint)1, new object?[] { (uint)2, (uint)1 })]
        [TestCase((uint)1, new object?[] { (char)2, (uint)1 })]
        [TestCase((uint)1, new object?[] { (uint)2, (uint)1 })]
        [TestCase((uint)1, new object?[] { (ushort)2, (uint)1 })]
        [TestCase((uint)1, new object?[] { (ulong)2, (uint)1 })]
        [TestCase((uint)1, new object?[] { (uint)2, (uint)1 })]
        [TestCase((uint)1, new object?[] { (long)2, (uint)1 })]
        [TestCase((uint)1, new object?[] { (uint)1, 2 })]
        [TestCase((uint)1, new object?[] { (uint)1, 2.0 })]
        [TestCase((uint)1, new object?[] { (uint)1, 2.0f })]
        [TestCase((uint)1, new object?[] { (uint)1, (uint)2 })]
        [TestCase((uint)1, new object?[] { (uint)1, (char)2 })]
        [TestCase((uint)1, new object?[] { (uint)1, (uint)2 })]
        [TestCase((uint)1, new object?[] { (uint)1, (ushort)2 })]
        [TestCase((uint)1, new object?[] { (uint)1, (ulong)2 })]
        [TestCase((uint)1, new object?[] { (uint)1, (uint)2 })]
        [TestCase((uint)1, new object?[] { (uint)1, (long)2 })]
        [TestCase((ushort)1, new object?[] { 2, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { 2.0, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { 2.0f, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { (ushort)2, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { (char)2, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { (uint)2, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { (ushort)2, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { (ulong)2, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { (ushort)2, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { (long)2, (ushort)1 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, 2 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, 2.0 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, 2.0f })]
        [TestCase((ushort)1, new object?[] { (ushort)1, (ushort)2 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, (char)2 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, (uint)2 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, (ushort)2 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, (ulong)2 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, (ushort)2 })]
        [TestCase((ushort)1, new object?[] { (ushort)1, (long)2 })]
        [TestCase(true, new object?[] { 2, true })]
        [TestCase(true, new object?[] { 2.0, true })]
        [TestCase(true, new object?[] { 2.0f, true })]
        [TestCase(true, new object?[] { (byte)2, true })]
        [TestCase(true, new object?[] { (char)2, true })]
        [TestCase(true, new object?[] { (uint)2, true })]
        [TestCase(true, new object?[] { (ushort)2, true })]
        [TestCase(true, new object?[] { (ulong)2, true })]
        [TestCase(true, new object?[] { (byte)2, true })]
        [TestCase(true, new object?[] { (long)2, true })]
        [TestCase(true, new object?[] { true, 2 })]
        [TestCase(true, new object?[] { true, 2.0 })]
        [TestCase(true, new object?[] { true, 2.0f })]
        [TestCase(true, new object?[] { true, (byte)2 })]
        [TestCase(true, new object?[] { true, (char)2 })]
        [TestCase(true, new object?[] { true, (uint)2 })]
        [TestCase(true, new object?[] { true, (ushort)2 })]
        [TestCase(true, new object?[] { true, (ulong)2 })]
        [TestCase(true, new object?[] { true, (byte)2 })]
        [TestCase(true, new object?[] { true, (long)2 })]
        [TestCase(false, new object?[] { 2, false })]
        [TestCase(false, new object?[] { 2.0, false })]
        [TestCase(false, new object?[] { 2.0f, false })]
        [TestCase(false, new object?[] { (byte)2, false })]
        [TestCase(false, new object?[] { (char)2, false })]
        [TestCase(false, new object?[] { (uint)2, false })]
        [TestCase(false, new object?[] { (ushort)2, false })]
        [TestCase(false, new object?[] { (ulong)2, false })]
        [TestCase(false, new object?[] { (byte)2, false })]
        [TestCase(false, new object?[] { (long)2, false })]
        [TestCase(false, new object?[] { false, 2 })]
        [TestCase(false, new object?[] { false, 2.0 })]
        [TestCase(false, new object?[] { false, 2.0f })]
        [TestCase(false, new object?[] { false, (byte)2 })]
        [TestCase(false, new object?[] { false, (char)2 })]
        [TestCase(false, new object?[] { false, (uint)2 })]
        [TestCase(false, new object?[] { false, (ushort)2 })]
        [TestCase(false, new object?[] { false, (ulong)2 })]
        [TestCase(false, new object?[] { false, (byte)2 })]
        [TestCase(false, new object?[] { false, (long)2 })]
        [TestCase(BooleanEnum.True, new object?[] { 2, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { 2.0, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { 2.0f, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { (byte)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { (char)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { (uint)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { (ushort)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { (ulong)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { (byte)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { (long)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, 2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, 2.0 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, 2.0f })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, (byte)2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, (char)2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, (uint)2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, (ushort)2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, (ulong)2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, (byte)2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.True, (long)2 })]
        [TestCase(BooleanEnum.False, new object?[] { 2, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { 2.0, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { 2.0f, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { (byte)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { (char)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { (uint)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { (ushort)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { (ulong)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { (byte)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { (long)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, 2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, 2.0 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, 2.0f })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, (byte)2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, (char)2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, (uint)2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, (ushort)2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, (ulong)2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, (byte)2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.False, (long)2 })]
        public void DoesNotEqualAny_WhenProvidingPartialMatchingObjects_ReturnsTrue(
            object? root,
            object?[] objects)
        {
            Assert.IsTrue(root.DoesNotEqualAny(objects));
        }

        [TestCase(null, new object?[] { 1, 2 })]
        [TestCase(null, new object?[] { 2, 1 })]
        [TestCase(1, new object?[] { 2, 3 })]
        [TestCase(1, new object?[] { 2.0, 3 })]
        [TestCase(1, new object?[] { 2.0f, 3 })]
        [TestCase(1, new object?[] { (byte)2, 3 })]
        [TestCase(1, new object?[] { (char)2, 3 })]
        [TestCase(1, new object?[] { (uint)2, 3 })]
        [TestCase(1, new object?[] { (ushort)2, 3 })]
        [TestCase(1, new object?[] { (ulong)2, 3 })]
        [TestCase(1, new object?[] { (short)2, 3 })]
        [TestCase(1, new object?[] { (long)2, 3 })]
        [TestCase(1, new object?[] { 3, 2 })]
        [TestCase(1, new object?[] { 3, 2.0 })]
        [TestCase(1, new object?[] { 3, 2.0f })]
        [TestCase(1, new object?[] { 3, (byte)2 })]
        [TestCase(1, new object?[] { 3, (char)2 })]
        [TestCase(1, new object?[] { 3, (uint)2 })]
        [TestCase(1, new object?[] { 3, (ushort)2 })]
        [TestCase(1, new object?[] { 3, (ulong)2 })]
        [TestCase(1, new object?[] { 3, (short)2 })]
        [TestCase(1, new object?[] { 3, (long)2 })]
        [TestCase(1.0, new object?[] { 2, 3.0 })]
        [TestCase(1.0, new object?[] { 2.0, 3.0 })]
        [TestCase(1.0, new object?[] { 2.0f, 3.0 })]
        [TestCase(1.0, new object?[] { (byte)2, 3.0 })]
        [TestCase(1.0, new object?[] { (char)2, 3.0 })]
        [TestCase(1.0, new object?[] { (uint)2, 3.0 })]
        [TestCase(1.0, new object?[] { (ushort)2, 3.0 })]
        [TestCase(1.0, new object?[] { (ulong)2, 3.0 })]
        [TestCase(1.0, new object?[] { (short)2, 3.0 })]
        [TestCase(1.0, new object?[] { (long)2, 3.0 })]
        [TestCase(1.0, new object?[] { 3.0, 2 })]
        [TestCase(1.0, new object?[] { 3.0, 2.0 })]
        [TestCase(1.0, new object?[] { 3.0, 2.0f })]
        [TestCase(1.0, new object?[] { 3.0, (byte)2 })]
        [TestCase(1.0, new object?[] { 3.0, (char)2 })]
        [TestCase(1.0, new object?[] { 3.0, (uint)2 })]
        [TestCase(1.0, new object?[] { 3.0, (ushort)2 })]
        [TestCase(1.0, new object?[] { 3.0, (ulong)2 })]
        [TestCase(1.0, new object?[] { 3.0, (short)2 })]
        [TestCase(1.0, new object?[] { 3.0, (long)2 })]
        [TestCase(1.0f, new object?[] { 2, 3.0f })]
        [TestCase(1.0f, new object?[] { 2.0, 3.0f })]
        [TestCase(1.0f, new object?[] { 2.0f, 3.0f })]
        [TestCase(1.0f, new object?[] { (byte)2, 3.0f })]
        [TestCase(1.0f, new object?[] { (char)2, 3.0f })]
        [TestCase(1.0f, new object?[] { (uint)2, 3.0f })]
        [TestCase(1.0f, new object?[] { (ushort)2, 3.0f })]
        [TestCase(1.0f, new object?[] { (ulong)2, 3.0f })]
        [TestCase(1.0f, new object?[] { (short)2, 3.0f })]
        [TestCase(1.0f, new object?[] { (long)2, 3.0f })]
        [TestCase(1.0f, new object?[] { 3.0f, 2 })]
        [TestCase(1.0f, new object?[] { 3.0f, 2.0 })]
        [TestCase(1.0f, new object?[] { 3.0f, 2.0f })]
        [TestCase(1.0f, new object?[] { 3.0f, (byte)2 })]
        [TestCase(1.0f, new object?[] { 3.0f, (char)2 })]
        [TestCase(1.0f, new object?[] { 3.0f, (uint)2 })]
        [TestCase(1.0f, new object?[] { 3.0f, (ushort)2 })]
        [TestCase(1.0f, new object?[] { 3.0f, (ulong)2 })]
        [TestCase(1.0f, new object?[] { 3.0f, (short)2 })]
        [TestCase(1.0f, new object?[] { 3.0f, (long)2 })]
        [TestCase((long)1, new object?[] { 2, (long)3 })]
        [TestCase((long)1, new object?[] { 2.0, (long)3 })]
        [TestCase((long)1, new object?[] { 2.0f, (long)3 })]
        [TestCase((long)1, new object?[] { (byte)2, (long)3 })]
        [TestCase((long)1, new object?[] { (char)2, (long)3 })]
        [TestCase((long)1, new object?[] { (uint)2, (long)3 })]
        [TestCase((long)1, new object?[] { (ushort)2, (long)3 })]
        [TestCase((long)1, new object?[] { (ulong)2, (long)3 })]
        [TestCase((long)1, new object?[] { (short)2, (long)3 })]
        [TestCase((long)1, new object?[] { (long)2, (long)3 })]
        [TestCase((long)1, new object?[] { (long)3, 2 })]
        [TestCase((long)1, new object?[] { (long)3, 2.0 })]
        [TestCase((long)1, new object?[] { (long)3, 2.0f })]
        [TestCase((long)1, new object?[] { (long)3, (byte)2 })]
        [TestCase((long)1, new object?[] { (long)3, (char)2 })]
        [TestCase((long)1, new object?[] { (long)3, (uint)2 })]
        [TestCase((long)1, new object?[] { (long)3, (ushort)2 })]
        [TestCase((long)1, new object?[] { (long)3, (ulong)2 })]
        [TestCase((long)1, new object?[] { (long)3, (short)2 })]
        [TestCase((long)1, new object?[] { (long)3, (long)2 })]
        [TestCase((short)1, new object?[] { 2, (short)3 })]
        [TestCase((short)1, new object?[] { 2.0, (short)3 })]
        [TestCase((short)1, new object?[] { 2.0f, (short)3 })]
        [TestCase((short)1, new object?[] { (byte)2, (short)3 })]
        [TestCase((short)1, new object?[] { (char)2, (short)3 })]
        [TestCase((short)1, new object?[] { (uint)2, (short)3 })]
        [TestCase((short)1, new object?[] { (ushort)2, (short)3 })]
        [TestCase((short)1, new object?[] { (ulong)2, (short)3 })]
        [TestCase((short)1, new object?[] { (short)2, (short)3 })]
        [TestCase((short)1, new object?[] { (long)2, (short)3 })]
        [TestCase((short)1, new object?[] { (short)3, 2 })]
        [TestCase((short)1, new object?[] { (short)3, 2.0 })]
        [TestCase((short)1, new object?[] { (short)3, 2.0f })]
        [TestCase((short)1, new object?[] { (short)3, (byte)2 })]
        [TestCase((short)1, new object?[] { (short)3, (char)2 })]
        [TestCase((short)1, new object?[] { (short)3, (uint)2 })]
        [TestCase((short)1, new object?[] { (short)3, (ushort)2 })]
        [TestCase((short)1, new object?[] { (short)3, (ulong)2 })]
        [TestCase((short)1, new object?[] { (short)3, (short)2 })]
        [TestCase((short)1, new object?[] { (short)3, (long)2 })]
        [TestCase((byte)1, new object?[] { 2, (byte)3 })]
        [TestCase((byte)1, new object?[] { 2.0, (byte)3 })]
        [TestCase((byte)1, new object?[] { 2.0f, (byte)3 })]
        [TestCase((byte)1, new object?[] { (byte)2, (byte)3 })]
        [TestCase((byte)1, new object?[] { (char)2, (byte)3 })]
        [TestCase((byte)1, new object?[] { (uint)2, (byte)3 })]
        [TestCase((byte)1, new object?[] { (ushort)2, (byte)3 })]
        [TestCase((byte)1, new object?[] { (ulong)2, (byte)3 })]
        [TestCase((byte)1, new object?[] { (byte)2, (byte)3 })]
        [TestCase((byte)1, new object?[] { (long)2, (byte)3 })]
        [TestCase((byte)1, new object?[] { (byte)3, 2 })]
        [TestCase((byte)1, new object?[] { (byte)3, 2.0 })]
        [TestCase((byte)1, new object?[] { (byte)3, 2.0f })]
        [TestCase((byte)1, new object?[] { (byte)3, (byte)2 })]
        [TestCase((byte)1, new object?[] { (byte)3, (char)2 })]
        [TestCase((byte)1, new object?[] { (byte)3, (uint)2 })]
        [TestCase((byte)1, new object?[] { (byte)3, (ushort)2 })]
        [TestCase((byte)1, new object?[] { (byte)3, (ulong)2 })]
        [TestCase((byte)1, new object?[] { (byte)3, (byte)2 })]
        [TestCase((byte)1, new object?[] { (byte)3, (long)2 })]
        [TestCase((char)1, new object?[] { 2, (char)3 })]
        [TestCase((char)1, new object?[] { 2.0, (char)3 })]
        [TestCase((char)1, new object?[] { 2.0f, (char)3 })]
        [TestCase((char)1, new object?[] { (char)2, (char)3 })]
        [TestCase((char)1, new object?[] { (char)2, (char)3 })]
        [TestCase((char)1, new object?[] { (uint)2, (char)3 })]
        [TestCase((char)1, new object?[] { (ushort)2, (char)3 })]
        [TestCase((char)1, new object?[] { (ulong)2, (char)3 })]
        [TestCase((char)1, new object?[] { (char)2, (char)3 })]
        [TestCase((char)1, new object?[] { (long)2, (char)3 })]
        [TestCase((char)1, new object?[] { (char)3, 2 })]
        [TestCase((char)1, new object?[] { (char)3, 2.0 })]
        [TestCase((char)1, new object?[] { (char)3, 2.0f })]
        [TestCase((char)1, new object?[] { (char)3, (char)2 })]
        [TestCase((char)1, new object?[] { (char)3, (char)2 })]
        [TestCase((char)1, new object?[] { (char)3, (uint)2 })]
        [TestCase((char)1, new object?[] { (char)3, (ushort)2 })]
        [TestCase((char)1, new object?[] { (char)3, (ulong)2 })]
        [TestCase((char)1, new object?[] { (char)3, (char)2 })]
        [TestCase((char)1, new object?[] { (char)3, (long)2 })]
        [TestCase((ulong)1, new object?[] { 2, (ulong)3 })]
        [TestCase((ulong)1, new object?[] { 2.0, (ulong)3 })]
        [TestCase((ulong)1, new object?[] { 2.0f, (ulong)3 })]
        [TestCase((ulong)1, new object?[] { (ulong)2, (ulong)3 })]
        [TestCase((ulong)1, new object?[] { (char)2, (ulong)3 })]
        [TestCase((ulong)1, new object?[] { (uint)2, (ulong)3 })]
        [TestCase((ulong)1, new object?[] { (ushort)2, (ulong)3 })]
        [TestCase((ulong)1, new object?[] { (ulong)2, (ulong)3 })]
        [TestCase((ulong)1, new object?[] { (ulong)2, (ulong)3 })]
        [TestCase((ulong)1, new object?[] { (long)2, (ulong)3 })]
        [TestCase((ulong)1, new object?[] { (ulong)3, 2 })]
        [TestCase((ulong)1, new object?[] { (ulong)3, 2.0 })]
        [TestCase((ulong)1, new object?[] { (ulong)3, 2.0f })]
        [TestCase((ulong)1, new object?[] { (ulong)3, (ulong)2 })]
        [TestCase((ulong)1, new object?[] { (ulong)3, (char)2 })]
        [TestCase((ulong)1, new object?[] { (ulong)3, (uint)2 })]
        [TestCase((ulong)1, new object?[] { (ulong)3, (ushort)2 })]
        [TestCase((ulong)1, new object?[] { (ulong)3, (ulong)2 })]
        [TestCase((ulong)1, new object?[] { (ulong)3, (ulong)2 })]
        [TestCase((ulong)1, new object?[] { (ulong)3, (long)2 })]
        [TestCase((uint)1, new object?[] { 2, (uint)3 })]
        [TestCase((uint)1, new object?[] { 2.0, (uint)3 })]
        [TestCase((uint)1, new object?[] { 2.0f, (uint)3 })]
        [TestCase((uint)1, new object?[] { (uint)2, (uint)3 })]
        [TestCase((uint)1, new object?[] { (char)2, (uint)3 })]
        [TestCase((uint)1, new object?[] { (uint)2, (uint)3 })]
        [TestCase((uint)1, new object?[] { (ushort)2, (uint)3 })]
        [TestCase((uint)1, new object?[] { (ulong)2, (uint)3 })]
        [TestCase((uint)1, new object?[] { (uint)2, (uint)3 })]
        [TestCase((uint)1, new object?[] { (long)2, (uint)3 })]
        [TestCase((uint)1, new object?[] { (uint)3, 2 })]
        [TestCase((uint)1, new object?[] { (uint)3, 2.0 })]
        [TestCase((uint)1, new object?[] { (uint)3, 2.0f })]
        [TestCase((uint)1, new object?[] { (uint)3, (uint)2 })]
        [TestCase((uint)1, new object?[] { (uint)3, (char)2 })]
        [TestCase((uint)1, new object?[] { (uint)3, (uint)2 })]
        [TestCase((uint)1, new object?[] { (uint)3, (ushort)2 })]
        [TestCase((uint)1, new object?[] { (uint)3, (ulong)2 })]
        [TestCase((uint)1, new object?[] { (uint)3, (uint)2 })]
        [TestCase((uint)1, new object?[] { (uint)3, (long)2 })]
        [TestCase((ushort)1, new object?[] { 2, (ushort)3 })]
        [TestCase((ushort)1, new object?[] { 2.0, (ushort)3 })]
        [TestCase((ushort)1, new object?[] { 2.0f, (ushort)3 })]
        [TestCase((ushort)1, new object?[] { (ushort)2, (ushort)3 })]
        [TestCase((ushort)1, new object?[] { (char)2, (ushort)3 })]
        [TestCase((ushort)1, new object?[] { (uint)2, (ushort)3 })]
        [TestCase((ushort)1, new object?[] { (ushort)2, (ushort)3 })]
        [TestCase((ushort)1, new object?[] { (ulong)2, (ushort)3 })]
        [TestCase((ushort)1, new object?[] { (ushort)2, (ushort)3 })]
        [TestCase((ushort)1, new object?[] { (long)2, (ushort)3 })]
        [TestCase((ushort)1, new object?[] { (ushort)3, 2 })]
        [TestCase((ushort)1, new object?[] { (ushort)3, 2.0 })]
        [TestCase((ushort)1, new object?[] { (ushort)3, 2.0f })]
        [TestCase((ushort)1, new object?[] { (ushort)3, (ushort)2 })]
        [TestCase((ushort)1, new object?[] { (ushort)3, (char)2 })]
        [TestCase((ushort)1, new object?[] { (ushort)3, (uint)2 })]
        [TestCase((ushort)1, new object?[] { (ushort)3, (ushort)2 })]
        [TestCase((ushort)1, new object?[] { (ushort)3, (ulong)2 })]
        [TestCase((ushort)1, new object?[] { (ushort)3, (ushort)2 })]
        [TestCase((ushort)1, new object?[] { (ushort)3, (long)2 })]
        [TestCase(true, new object?[] { 2, false })]
        [TestCase(true, new object?[] { 2.0, false })]
        [TestCase(true, new object?[] { 2.0f, false })]
        [TestCase(true, new object?[] { (byte)2, false })]
        [TestCase(true, new object?[] { (char)2, false })]
        [TestCase(true, new object?[] { (uint)2, false })]
        [TestCase(true, new object?[] { (ushort)2, false })]
        [TestCase(true, new object?[] { (ulong)2, false })]
        [TestCase(true, new object?[] { (byte)2, false })]
        [TestCase(true, new object?[] { (long)2, false })]
        [TestCase(true, new object?[] { false, 2 })]
        [TestCase(true, new object?[] { false, 2.0 })]
        [TestCase(true, new object?[] { false, 2.0f })]
        [TestCase(true, new object?[] { false, (byte)2 })]
        [TestCase(true, new object?[] { false, (char)2 })]
        [TestCase(true, new object?[] { false, (uint)2 })]
        [TestCase(true, new object?[] { false, (ushort)2 })]
        [TestCase(true, new object?[] { false, (ulong)2 })]
        [TestCase(true, new object?[] { false, (byte)2 })]
        [TestCase(true, new object?[] { false, (long)2 })]
        [TestCase(false, new object?[] { 2, true })]
        [TestCase(false, new object?[] { 2.0, true })]
        [TestCase(false, new object?[] { 2.0f, true })]
        [TestCase(false, new object?[] { (byte)2, true })]
        [TestCase(false, new object?[] { (char)2, true })]
        [TestCase(false, new object?[] { (uint)2, true })]
        [TestCase(false, new object?[] { (ushort)2, true })]
        [TestCase(false, new object?[] { (ulong)2, true })]
        [TestCase(false, new object?[] { (byte)2, true })]
        [TestCase(false, new object?[] { (long)2, true })]
        [TestCase(false, new object?[] { true, 2 })]
        [TestCase(false, new object?[] { true, 2.0 })]
        [TestCase(false, new object?[] { true, 2.0f })]
        [TestCase(false, new object?[] { true, (byte)2 })]
        [TestCase(false, new object?[] { true, (char)2 })]
        [TestCase(false, new object?[] { true, (uint)2 })]
        [TestCase(false, new object?[] { true, (ushort)2 })]
        [TestCase(false, new object?[] { true, (ulong)2 })]
        [TestCase(false, new object?[] { true, (byte)2 })]
        [TestCase(false, new object?[] { true, (long)2 })]
        [TestCase(BooleanEnum.True, new object?[] { 2, BooleanEnum.False })]
        [TestCase(BooleanEnum.True, new object?[] { 2.0, BooleanEnum.False })]
        [TestCase(BooleanEnum.True, new object?[] { 2.0f, BooleanEnum.False })]
        [TestCase(BooleanEnum.True, new object?[] { (byte)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.True, new object?[] { (char)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.True, new object?[] { (uint)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.True, new object?[] { (ushort)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.True, new object?[] { (ulong)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.True, new object?[] { (byte)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.True, new object?[] { (long)2, BooleanEnum.False })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.False, 2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.False, 2.0 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.False, 2.0f })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.False, (byte)2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.False, (char)2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.False, (uint)2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.False, (ushort)2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.False, (ulong)2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.False, (byte)2 })]
        [TestCase(BooleanEnum.True, new object?[] { BooleanEnum.False, (long)2 })]
        [TestCase(BooleanEnum.False, new object?[] { 2, BooleanEnum.True })]
        [TestCase(BooleanEnum.False, new object?[] { 2.0, BooleanEnum.True })]
        [TestCase(BooleanEnum.False, new object?[] { 2.0f, BooleanEnum.True })]
        [TestCase(BooleanEnum.False, new object?[] { (byte)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.False, new object?[] { (char)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.False, new object?[] { (uint)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.False, new object?[] { (ushort)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.False, new object?[] { (ulong)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.False, new object?[] { (byte)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.False, new object?[] { (long)2, BooleanEnum.True })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.True, 2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.True, 2.0 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.True, 2.0f })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.True, (byte)2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.True, (char)2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.True, (uint)2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.True, (ushort)2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.True, (ulong)2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.True, (byte)2 })]
        [TestCase(BooleanEnum.False, new object?[] { BooleanEnum.True, (long)2 })]
        public void DoesNotEqualAll_WhenProvidingNonMatchingObjects_ReturnsTrue(
            object? root,
            object?[] objects)
        {
            Assert.IsTrue(root.DoesNotEqualAll(objects));
        }
    }
}
